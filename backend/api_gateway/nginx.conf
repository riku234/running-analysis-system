events {
    worker_connections 1024;
}

http {
    # MIMEタイプの設定
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    upstream video_processing {
        server video_processing:8001;
    }
    
    upstream pose_estimation {
        server pose_estimation:8002;
    }
    
    upstream feature_extraction {
        server feature_extraction:8003;
    }
    
    upstream analysis {
        server analysis:8004;
    }
    
    upstream advice_generation {
        server advice_generation:8005;
    }

    upstream frontend {
        server frontend:3000;
    }

    server {
        listen 80;
        server_name localhost;
        
        # Basic認証設定
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;
        
        # CORS設定
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        
        # Next.js静的ファイル（最優先）
        location /_next/static/ {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # キャッシュ設定
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Next.jsファビコンとその他の静的ファイル
        location ~* \.(ico|css|js|gif|jpe?g|png|svg|woff2?|ttf|eot)$ {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # キャッシュ設定
            expires 1M;
            add_header Cache-Control "public";
        }
        
        # フロントエンドサービスにプロキシ（その他すべて）
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Next.js の WebSocket サポート（Hot Reload用）
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            
            # フロントエンドサービスが利用できない場合のフォールバック
            error_page 502 503 504 @fallback;
        }
        
        # フォールバック：静的HTML（フロントエンドサービスが起動していない場合）
        location @fallback {
            root /usr/share/nginx/html;
            try_files /index.html =503;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        }

        # API ルーティング
        location /api/video/ {
            proxy_pass http://video_processing/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # ファイルアップロード用の設定
            client_max_body_size 100M;
            proxy_request_buffering off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        location /api/video_processing/ {
            proxy_pass http://video_processing/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # ファイルアップロード用の設定
            client_max_body_size 100M;
            proxy_request_buffering off;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
        }

        location /api/pose_estimation/ {
            proxy_pass http://pose_estimation/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/feature_extraction/ {
            proxy_pass http://feature_extraction/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/analysis/ {
            proxy_pass http://analysis/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 大量の骨格データ送信用の設定
            client_max_body_size 50M;
            proxy_request_buffering off;
            proxy_read_timeout 120s;
            proxy_connect_timeout 75s;
        }

        location /api/advice_generation/ {
            proxy_pass http://advice_generation/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoints
        location /health {
            return 200 '{"status": "healthy", "service": "api_gateway"}';
            add_header Content-Type application/json;
        }
    }
} 